
name: CI/CD

# todo 이건 포크 브랜치에서만 실행되야 함

# main 브랜치에서 이벤트(push) 발생 시 workflow 실행
on:
  push:
    branches: ["main"]

    # 포크된 레포에서만 실행
    if: github.repository == 'Soojin6943/2025_SEASONTHON_TEAM_52_BE'

# 실행될 작업들
jobs:
  build-and-deploy: # build and deploy ??
    # 작업 환경
    runs-on: ubuntu-latest

    # 작업 단계
    steps:
      # 코드 체크아웃
      # github 리포지토리의 코드를 작업 환경으로 가져옴
      - name: Checkout
        uses: actions/checkout@v3

      # JDK 17 설정
      # Java 17 환경 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      #  gradlew 파일에 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      # Gradle 빌드
      # Gradle Wrapper를 사용해 빌드
      # -x test 옵션 - 빌드 시 테스트를 생력하여 시간을 단축
      - name: Build with Gradle
        run: ./gradlew build -x test

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 도커 이미지 빌드 및 푸시
      # Dockerfile로 이미지 빌드 -> Docker Hub에 푸시
      # 태그는 latest 로 지정
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/roommate-app:latest

      # EC2 서버에 SSH 접속하여 배포
      # appleboy/ssh-action을 사용해 ec2 접속 -> 배포 스크립트 실행
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스의 public IP 주소
          username: ${{ secrets.EC2_USERNAME }} # EC2 접속용 사용자 이름
          key: ${{ secrets.EC2_SSH_KEY }} # EC2 접속용 프라이빗 키
          script: |
            # Docker Hub에서 최신 이미지를 pull
            docker pull ${{ secrets.DOCKER_USERNAME }}/roommate-app:latest
            
            # 기존에 실행 중이던 컨테이너를 중지하고 삭제 (없어도 에러나지 않도록 || true 추가)
            docker stop roommate-container || true
            docker rm roommate-container || true
            
            # 새로운 컨테이너 실행
            # -d: 백그라운드 실행
            # --name: 컨테이너 이름 지정
            # -p 8080:8080: 호스트의 8080 포트와 컨테이너의 8080 포트를 연결
            # --network="host": 컨테이너가 호스트(EC2)의 네트워크를 직접 사용하도록 설정. 
            #                   => 이 설정을 통해 컨테이너 안의 앱이 localhost(127.0.0.1)로 EC2에 설치된 MySQL에 접속
            # -e: 환경변수 설정. GitHub Secrets에 저장된 DB 정보를 컨테이너에 전달
            
            export SPRING_DATASOURCE_URL="${{ secrets.DB_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.DB_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export CLOVA_OCR_RECEIPT_URL="${{ secrets.CLOVA_OCR_RECEIPT_URL }}"
            export CLOVA_OCR_RECEIPT_SECRET="${{ secrets.CLOVA_OCR_RECEIPT_SECRET }}"
            export CLOVA_OCR_UTILITY_URL="${{ secrets.CLOVA_OCR_UTILITY_URL }}"
            export CLOVA_OCR_UTILITY_SECRET="${{ secrets.CLOVA_OCR_UTILITY_SECRET }}"
            export OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}"
            export OPENAI_MODEL="${{ secrets.OPENAI_MODEL }}"
            export JPA_DDL_AUTO="${{ secrets.JPA_DDL_AUTO }}"
            export BUCKET_NAME="${{ secrets.BUCKET_NAME }}"
            export BUCKET_REGION="${{ secrets.BUCKET_REGION }}"
            export S3_ACCESS_KEY="${{ secrets.S3_ACCESS_KEY }}"
            export S3_SECRET_KEY="${{ secrets.S3_SECRET_KEY }}"
          
            docker run -d --name roommate-container -p 8080:8080 --network="host" \
              -e SPRING_DATASOURCE_URL \
              -e SPRING_DATASOURCE_USERNAME \
              -e SPRING_DATASOURCE_PASSWORD \
              -e CLOVA_OCR_RECEIPT_URL \
              -e CLOVA_OCR_RECEIPT_SECRET \
              -e CLOVA_OCR_UTILITY_URL \
              -e CLOVA_OCR_UTILITY_SECRET \
              -e OPENAI_API_KEY \
              -e OPENAI_MODEL \
              -e JPA_DDL_AUTO \
              -e BUCKET_NAME \
              -e BUCKET_REGION \
              -e S3_ACCESS_KEY \
              -e S3_SECRET_KEY
              ${{ secrets.DOCKER_USERNAME }}/roommate-app:latest